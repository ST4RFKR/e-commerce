generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String    @unique
  password String
  role     UserRole  @default(USER)
  verified DateTime?

  provider   String?
  providerId String?

  cart   Cart?
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        Int      @id @default(autoincrement())
  sku       String   @unique
  price     Int
  stock     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translations ProductTranslation[]

  images   ProductImage[]
  CartItem CartItem[]

  @@index([sku])
}

model ProductTranslation {
  id          Int     @id @default(autoincrement())
  productId   Int
  language    String // 'en', 'uk', 'ru' и т.д.
  title       String
  description String  @db.Text
  slug        String // URL-friendly версия для SEO
  metaTitle   String?
  metaDesc    String?

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, language])
  @@index([language])
  @@index([slug, language])
}

model ProductImage {
  id        Int    @id @default(autoincrement())
  productId Int
  imageUrl  String

  product Product @relation(fields: [productId], references: [id])

  @@map("product_image")
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  items CartItem[]

  token String

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  productItem Product @relation(fields: [productId], references: [id])
  productId   Int

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?

  items Json

  fullName String
  email    String
  phone    String
  comment  String?

  deliveryType      DeliveryType?
  deliveryCity      String?
  deliveryWarehouse String?
  deliveryStoreId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum DeliveryType {
  NOVA_POSHTA
  PICKUP
}
